{
    "AdventOfCode": {
        "prefix": "!aoc",
        "body": [
            "TO-DO"
        ],
        "description": "Advent of Code solution in Python"
    },
    "LeetcodeSolutionPython": {
        "prefix": "!lc",
        "body": [
            "from typing import List\n",
            "# Runtime complexity: ",
            "# Auxiliary space complexity: ",
            "class Solution:",
            "    def ${1:solve}(self, ${2:l}: ${3:List[int]}) -> ${4:int}:",
            "        ans = 0",
            "        # TODO$0",
            "        return ans\n"
        ],
        "description": "Leetcode challenge solution in Python"
    },
    "LeetcodeTestcasePython": {
        "prefix": "!tc",
        "body": [
            "import unittest\n",
            "from lc${1:0000} import Solution\n",
            "class Test_${2:solve}(unittest.TestCase):",
            "    def test(self):",
            "        s = Solution()",
            "        self.assertEqual(s.$2(${3:args}), ${4:0})\n",
            "if __name__ == \"__main__\":",
            "    unittest.main()"
        ],
        "description": "Leetcode challenge unit tests in Python"
    }
}
