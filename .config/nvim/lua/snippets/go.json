{
    "AdventOfCode": {
        "prefix": "!aoc",
        "body": [
            "package main",
            "",
            "import (",
                "\t\"bufio\"",
                "\t\"fmt\"",
                "\t\"log\"",
                "\t\"os\"",
            ")",
            "",
            "func main() {",
                "\tinputFile := \"example.txt\"",
                "\tif len(os.Args) < 2 {",
                    "\t\tfmt.Printf(\"Input file not specified. Using %q.\\n\", inputFile)",
                "\t} else {",
                    "\t\tinputFile = os.Args[1]",
                "\t}",
                "\tfile, err := os.Open(inputFile)",
                "\tif err != nil {",
                    "\t\tlog.Fatal(err)",
                "\t}",
                "\tdefer file.Close()",
                "",
                "\tsilver, gold := 0, 0",
                "\tscanner := bufio.NewScanner(file)",
                "\tfor scanner.Scan() {",
                "\t\tline := scanner.Text()",
                "\t\tfmt.Println(line)",
                "\t}",
                "\tfmt.Printf(\"Silver: %d\\n\", silver)",
                "\tfmt.Printf(\"Gold: %d\\n\", gold)",
            "}"
        ],
        "description": "Advent of Code solution template"
    },
    "LeetcodeSolutionGolang": {
        "prefix": "!lc",
        "body": [
            "package lc${1:0001}\n",
            "// Runtime complexity:",
            "// Auxiliary space:",
            "func ${2:foo() int} {",
            "\tans := 0$0",
            "\treturn ans",
            "}"
        ],
        "description": "Leetcode challenge solution in Golang"
    },
    "LeetcodeTestcaseGolang": {
        "prefix": "!tc",
        "body": [
            "package lc${1:0001}",
            "",
            "import \"testing\"",
            "",
            "func Test_${2:Foo}(t *testing.T) {",
            "\ttestcases := []struct {",
            "\t\t${3:input}    ${4:[]int}",
            "\t\texpected ${5:int}",
            "\t}{",
            "\t\t{$4{}, 0},$0",
            "\t\t{$4{1, 2}, 2},",
            "\t}",
            "",
            "\tfor i, tc := range testcases {",
            "\t\tactual := $2(tc.$3)",
            "\t\tif actual != tc.expected {",
            "\t\t\tt.Errorf(\"Testcase %02d (%v) failed: want %d, got %d\", i+1, tc.$3, tc.expected, actual)",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "Leetcode challenge testcase in Golang"
    },
    "Queue": {
        "prefix": "Queue",
        "body": [
            "type ${1:Queue} []${2:int}\n",
            "func (q *$1) Enqueue(val $2) {",
            "\t*q = append(*q, val)",
            "}\n",
            "func (q *$1) Dequeue() ($2, error) {",
            "\tif len(*q) == 0 {",
            "\t\treturn 0, fmt.Errorf(\"Dequeue() from an empty $1.\")",
            "\t}",
            "\tval := (*q)[0]",
            "\t*q = (*q)[1:]",
            "\treturn val, nil",
            "}"
        ],
        "description": "Simple queue (FIFO) data structure. Not thread-safe!"
    },
    "Stack": {
        "prefix": "Stack",
        "body": [
            "type ${1:Stack} []${2:int}\n",
            "func (s *$1) Push(val $2) {",
            "\t*s = append(*s, val)",
            "}\n",
            "func (s *$1) Pop() ($2, error) {",
            "\tsz := len(*s)",
            "\tif sz == 0 {",
            "\t\treturn 0, fmt.Errorf(\"Pop() from an empty $1.\")",
            "\t}",
            "\tval := (*s)[sz-1]",
            "\t*s = (*s)[:sz-1]",
            "\treturn val, nil",
            "}"
        ],
        "description": "Simple stack (LIFO) data structure. Not thread-safe!"
    }
}
